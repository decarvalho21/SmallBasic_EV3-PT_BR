<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SmallBasicEV3Extension</name>
    </assembly>
    <members>
        <!--<member name="T:SmallBasicEV3Extension.Assert">
            <summary>
            A test facility to help check part of the code for correctness.
            Assertions make implicit assumptions about the current program state explicit. By adding assertion calls you can find bugs in your program more easily. For example, when a part of the program depends on the variable A having a positive value, you could call  Assert.Greater(A,0,"A must be > 0!").
            In the case that the program runs into an assertion that is not satisfied, the error message is displayed stating the problem.
            </summary>
        </member>-->
        <member name="T:SmallBasicEV3Extension.Assert">
            <summary>
            Testa parte do programa para detectar erros e, caso sejam detectados, exibe uma mensagem na saída.
            Essa função analisa duas variáveis, ou uma variável e um número, de acordo com uma afirmação lógica. Por exemplo, se em uma parte específica do programa for necessário que o valor A seja positivo, você pode chamar Assert.Greater(A,0,"A precisa ser > 0!"). Caso o valor do exemplo seja negativo, será exibida a mensagem 'ASSERT FAILED: A must be > 0!', e o programa continua.
            </summary>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Assert.Failed(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Write a failure message to the display. This function should only be called if something has already failed in the program.
            </summary>
            <param name="message">Message to be displayed</param>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Assert.Failed(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Exibe uma mensagem de erro na saída.
            Essa função deve ser chamada somente em casos de falhas já definidas no programa.
            </summary>
            <param name="message">Mensagem a ser exibida</param>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Assert.Equal(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Make sure that two values are equal. For this test, even "True" and "tRue" are not considered equal.
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="message">Message that will be displayed if the assertion fails</param>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Assert.Equal(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Testa se dois valores são iguais.
            Nessa função, até letras minúsculas e maiúsculas, como "Alto" e "aLto", podem diferenciar uma cadeia de caracteres da outra.
            </summary>
            <param name="a">Primeiro valor</param>
            <param name="b">Segundo valor</param>
            <param name="message">Mensagem que será exibida caso a afirmação esteja errada</param>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Assert.NotEqual(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Make sure that two values are not equal. For this test, even "True" and "tRue" are not considered equal.
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="message">Message that will be displayed if the assertion fails</param>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Assert.NotEqual(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Testa se dois valores não são iguais.
            Nessa função, até letras minúsculas e maiúsculas, como "Alto" e "aLto", podem diferenciar uma cadeia de caracteres da outra.
            </summary>
            <param name="a">Primeiro valor</param>
            <param name="b">Segundo valor</param>
            <param name="message">Mensagem que será exibida caso a afirmação esteja errada</param>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Assert.Less(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Make sure that the first number is less than the second.
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="message">Message that will be displayed if the assertion fails</param>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Assert.Less(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Testa se o primeiro valor é menor que o segundo.
            </summary>
            <param name="a">Primeiro valor</param>
            <param name="b">Segundo valor</param>
            <param name="message">Mensagem que será exibida caso a afirmação esteja errada</param>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Assert.Greater(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Make sure that the first number is greater than the second.
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="message">Message that will be displayed if the assertion fails</param>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Assert.Greater(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Testa se o primeiro valor é maior que o segundo.
            </summary>
            <param name="a">Primeiro valor</param>
            <param name="b">Segundo valor</param>
            <param name="message">Mensagem que será exibida caso a afirmação esteja errada</param>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Assert.LessEqual(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Make sure that the first number is less than or equal to the second.
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="message">Message that will be displayed if the assertion fails</param>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Assert.LessEqual(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Testa se o primeiro valor é menor ou igual ao segundo.
            </summary>
            <param name="a">Primeiro valor</param>
            <param name="b">Segundo valor</param>
            <param name="message">Mensagem que será exibida caso a afirmação esteja errada</param>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Assert.GreaterEqual(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Make sure that the first number is greater than or equal to the second.
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="message">Message that will be displayed if the assertion fails</param>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Assert.GreaterEqual(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Testa se o primeiro valor é maior ou igual ao segundo.
            </summary>
            <param name="a">Primeiro valor</param>
            <param name="b">Segundo valor</param>
            <param name="message">Mensagem que será exibida caso a afirmação esteja errada</param>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Assert.Near(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Make sure that the two numbers are nearly identical. This can be used for fractional numbers with many decimal places where the computation could give slightly different results because of rounding issues.
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="message">Message that will be displayed if the assertion fails</param>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Assert.Near(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Testa se os dois valores são praticamente iguais.
            Essa função pode ser útil em casos de frações com muitas casas decimais, sujeitas a pequenas diferenças nos seus resultados devido à possíveis problemas de arredondamento.
            </summary>
            <param name="a">Primeiro valor</param>
            <param name="b">Segundo valor</param>
            <param name="message">Mensagem que será exibida caso a afirmação esteja errada</param>
        </member>
        <member name="T:SmallBasicEV3Extension.Buttons">
            <summary>
            Reads the states and clicks of the buttons on the EV3 brick.
            The buttons are specified with the following letters:
             U   up
             D   down
             L   left
             R   right
             E   center
            </summary>
        </member>
        <member name="M:SmallBasicEV3Extension.Buttons.GetClicks">
            <summary>
            Check which buttons were clicked since the last call to GetClicks and returns a text containing their letters.
            The 'clicked' state of the buttons is then removed. Also a sound is emitted from the brick when a click was detected.
            </summary>
            <returns>A text containing the letters of the clicked buttons (can be empty)</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.Buttons.Wait">
            <summary>
            Wait until at least one button is clicked. If a buttons was already clicked before calling this function, it returns immediately.
            </summary>
        </member>
        <member name="M:SmallBasicEV3Extension.Buttons.Flush">
            <summary>
            Remove any clicked-state of all buttons. Subsequent calls to GetClicks will only deliver the buttons that were clicked after the flush.
            </summary>
        </member>
        <member name="P:SmallBasicEV3Extension.Buttons.Current">
            <summary>
            The buttons that are currently pressed.
            This property contains a text with the key letters of all keys being pressed at the moment.
            </summary>
        </member>
        <member name="T:SmallBasicEV3Extension.Byte">
            <summary>
            Manipulate individual bits of an 8-bit numerical quantity.
            This library lets you treat Small Basic numbers as if they were organized as 8-bit integer values (a.k.a. "bytes"). To do so, the parameter values are always converted to plain bytes, then the requested operation is performed and then the result is converted back to a Small Basic number.
            The usual bit operations are supported: AND, OR, NOT, XOR, various shifts and data conversion operations. Note that the identifiers AND and OR are reserved words of Small Basic and so these operations are named AND_ and OR_ instead. For further information see https://en.wikipedia.org/wiki/Bitwise_operation .
            </summary>
        </member>
        <member name="M:SmallBasicEV3Extension.Byte.NOT(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Bitwise negation.
            </summary>
            <param name="value">Number to negate</param>
            <returns>The number you get when every bit of the input byte is individually inverted</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.Byte.AND_(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Bitwise AND operation.
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The number you get when merging the two input bytes a and b by doing a binary AND operation on their individual bits</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.Byte.OR_(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Bitwise OR operation.
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The number you get when merging the two input bytes a and b by doing a binary OR operation on their individual bits</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.Byte.XOR(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Bitwise XOR operation.
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The number you get when merging the two input bytes a and b by doing a binary XOR operation on their individual bits</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.Byte.BIT(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Extract a single bit from a byte.
            </summary>
            <param name="value">The byte number from where to extract the bit</param>
            <param name="index">Position of the bit inside the byte</param>
            <returns>The bit on the specified position which is either 0 or 1</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.Byte.SHL(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Perform a bitwise shift operation to the left.
            </summary>
            <param name="value">The byte whose bits will be shifted</param>
            <param name="distance">By how many positions to shift the bits</param>
            <returns>The number you get after moving every bit of the input value towards the more significant positions</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.Byte.SHR(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Perform a bitwise shift operation to the right.
            </summary>
            <param name="value">The byte whose bits will be shifted</param>
            <param name="distance">By how many positions to shift the bits</param>
            <returns>The number you get after moving every bit of the input value towards the less significant positions</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.Byte.ToHex(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Convert an 8-bit byte to its 2-digit hexadecimal string representation.
            </summary>
            <param name="value">The byte to convert into a string</param>
            <returns>A string holding 2 hexadecimal digits</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.Byte.ToBinary(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Convert an 8-bit byte to its 8-digit binary string representation.
            </summary>
            <param name="value">The byte to convert into a string</param>
            <returns>A string holding 8 binary digits</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.Byte.ToLogic(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Convert a number (can be a 8-bit byte or any other number) to a logic value of either "True" or "False".
            This value can then be used for the condition in If or While or any other purpose.
            Note that any input value greater than 0 results in a "True" while an input value of 0 or any negative value results in "False".
            This specific behaviour allows some weird and wonderful things to be done with this command. Refer to the appendix for advanced logic operations.
            </summary>
            <param name="value">The numeric value to be converted into its corresponding logic value</param>
            <returns>Either "True" or "False"</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.Byte.H(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Convert a string that contains a hexadecimal value into a number.
            </summary>
            <param name="value">The string holding a byte in hexadecimal form (for example: "4F")</param>
            <returns>The byte as number</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.Byte.B(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Convert a string that contains a binary value into a number.
            </summary>
            <param name="value">The string holding a byte in binary form (for example: "01001111")</param>
            <returns>The byte as number</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.Byte.L(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Convert a string that contains a logic value into a numerical 0 or 1.
            </summary>
            <param name="value">The string holding a logic value. All case-insensitive variants of "True" ("TRUE","TrUe", "truE", etc.) are considered the same. Everything else is treated as "False".</param>
            <returns>0 or 1</returns>
        </member>
        <!--<member name="T:SmallBasicEV3Extension.EV3File">
            <summary>
            Access the file system on the EV3 brick to read or write data.
            File names can be given either absolute (with a leading '/') to reach any file in the system, or relative to the 'prjs' folder.
            </summary>
        </member>-->
        <member name="T:SmallBasicEV3Extension.EV3File">
            <summary>
            Acessa o arquivo de sistema no EV3 brick para leitura ou gravação de dados.
            O nome dos arquivos pode ser dado de forma absoluta (começando com '/') para acessar qualquer arquivo do sistema, ou relativo à pasta 'prjs'.
            </summary>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.EV3File.OpenWrite(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Open a file for writing. When the file already exists, it will be overwritten.
            </summary>
            <param name="filename">Name of the file to create/overwrite</param>
            <returns>A number that identifies this open file (a.k.a. file handle)</returns>
        </member>-->
        <member name="M:SmallBasicEV3Extension.EV3File.OpenWrite(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Abre um arquivo em modo de gravação. Caso o arquivo já exista, será sobrescrito (substituído com as novas alterações).
            </summary>
            <param name="filename">Nome do arquivo para criar/sobrescrever</param>
            <returns>Um número que identifica o arquivo aberto(também chamado de file handle)</returns>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.EV3File.OpenAppend(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Open a file for adding data. When the file does not exist, it will be created.
            </summary>
            <param name="filename">Name of the file to create/extend</param>
            <returns>A number that identifies this open file (a.k.a. file handle)</returns>
        </member>-->
        <member name="M:SmallBasicEV3Extension.EV3File.OpenAppend(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Abre um arquivo para incrementá-lo. Caso o arquivo não exista, será criado um novo arquivo.
            </summary>
            <param name="filename">Nome do arquivo para criar/incrementar</param>
            <returns>Um número que identifica o arquivo aberto(também chamado de file handle)</returns>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.EV3File.OpenRead(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Open a file for reading data. When the file does not exist, a 0 is returned.
            </summary>
            <param name="filename">Name of the file to read from</param>
            <returns>A number that identifies this open file (a.k.a. file handle) or 0 if file does not exist</returns>
        </member>-->
        <member name="M:SmallBasicEV3Extension.EV3File.OpenRead(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Abre um arquivo em modo de leitura. Caso o arquivo não exista, é retornado 0 na saída.
            </summary>
            <param name="filename">Nome do arquivo para leitura</param>
            <returns>Um número que identifica o arquivo aberto(também chamado de file handle) ou 0 caso não exista.</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.EV3File.Close(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Close an open file.
            </summary>
            <param name="handle">The file handle (previously obtained from an Open... call)</param>
        </member>
        <member name="M:SmallBasicEV3Extension.EV3File.WriteLine(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Write one line of text to the file. The line will be encoded with ISO-8859-1 encoding and will be terminated with a newline-character (code 10).
            </summary>
            <param name="handle">The file handle (previously obtained from an Open... call)</param>
            <param name="text">The text to write to the file</param>
        </member>
        <member name="M:SmallBasicEV3Extension.EV3File.WriteByte(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Write a single byte of data to the file.
            </summary>
            <param name="handle">The file handle (previously obtained from an Open... call)</param>
            <param name="data">One byte to write (value of 0 - 255)</param>
        </member>
        <member name="M:SmallBasicEV3Extension.EV3File.ReadLine(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Read one line of text from the file. The line will be decoded using the ISO-8859-1 encoding and must be terminated with a newline-character (code 10).
            </summary>
            <param name="handle">The file handle (previously obtained from an Open... call)</param>
            <returns>The text from the current line in the file</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.EV3File.ReadByte(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Read one byte of data from the file.
            </summary>
            <param name="handle">The file handle (previously obtained from an Open... call)</param>
            <returns>The next byte from the file</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.EV3File.ReadNumberArray(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Read a whole array of numbers in binary form from the file. The numbers are encoded in IEEE single precision floating point representation.
            </summary>
            <param name="handle">The file handle (previously obtained from an Open... call)</param>
            <param name="size">Number of values to read</param>
            <returns>An array of size elements holding the values</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.EV3File.WriteNumberArray(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Write a whole array of numbers in binary fom to the file. The numbers are encoded in IEEE single precision floating point representation.
            </summary>
            <param name="handle">The file handle (previously obtained from an Open... call)</param>
            <param name="size">Number of values to write</param>
            <param name="data">Array holding the values</param>
        </member>
        <member name="M:SmallBasicEV3Extension.EV3File.ConvertToNumber(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Utility function to convert a text to a number.
            </summary>
            <param name="text">A text holding a number in decimal representation (with optional fractional digits)</param>
            <returns>The number</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.EV3File.TableLookup(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Utility function to read bytes from potentially huge data files that are too big to be transfered to memory as a whole.
            Because the file could be so big that the numerical precision of the normal numbers is not enough, a row/column addressing is possible.
            </summary>
            <param name="filename">The name of the file</param>
            <param name="bytes_per_row">When the file has a row/column structure, this is the number of bytes in one row. Use 1 if not applicable.</param>
            <param name="row">Which row to access (start with 0)</param>
            <param name="column">Which column to access (start with 0)</param>
            <returns>The byte on the denoted position</returns>
        </member>
        <member name="T:SmallBasicEV3Extension.F">
            <summary>
            A framework to create functions with parameters and local variables in Small Basic.
            This enables programs to call user-defined library functions in a form similar to what is possible with the built-in commands, including nicer parameter passing and return values.
            Functions can be defined by use of the F.Function command and can be later called with one of the F.Call - commands.
            See the provided example "Function.sb" for a better introduction.
            </summary>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Function(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Define a named function and its local variables/parameters with default values. Before this command is executed, the Start property needs to be set to a subroutine that will then be the starting point of the function.
            The local variables are also used for parameter passing when using a Call command: For any call with n parameters, these parameters will be assigned to the first n local variables. The rest of the local variables will be set to their defined initial value.
            </summary>
            <param name="name">The name for the function (needs to be a string literal)</param>
            <param name="parameterdefinitions">A string that holds a sequence of local variable names and initial values. This looks like for example "A B:5 T:hello". When no default is specified, 0 will be used.</param>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Set(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Set a named local variable to a specified value.
            </summary>
            <param name="variablename">The name of the local variable (case insensitive)</param>
            <param name="value">The value to store into the local variable</param>
        </member>
        <member name="M:SmallBasicEV3Extension.F.ReturnNumber(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Causes the current function call to terminate immediately and delivers the value as number back to the caller.
            In "brick mode" it is only allowed to use this command in the topmost sub of a function.
            </summary>
            <param name="value">The return value (must be a number)</param>
        </member>
        <member name="M:SmallBasicEV3Extension.F.ReturnText(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Causes the current function call to terminate immediately and delivers the value as text back to the caller.
            In "brick mode" it is only allowed to use this command in the topmost sub of a function.
            </summary>
            <param name="value">The return value (is interpreted as text)</param>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Return">
            <summary>
            Causes the current function call to terminate immediately.
            In "brick mode" it is only allowed to use this command in the topmost sub of a function.
            </summary>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Get(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Retrieve the value of a named local variable.
            </summary>
            <param name="variablename">The name of the local variable (case insensitive)</param>
            <returns>The value stored in the variable</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Call0(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Do a function call without passing parameters.
            </summary>
            <param name="name">The name of the function (case insensitive)</param>
            <returns>The value returned by the function</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Call1(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Do a function call with 1 parameter.
            </summary>
            <param name="name">The name of the function (case insensitive)</param>
            <param name="p1">Parameter 1</param>
            <returns>The value returned by the function</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Call2(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Do a function call with 2 parameters.
            </summary>
            <param name="name">The name of the function (case insensitive)</param>
            <param name="p1">Parameter 1</param>
            <param name="p2">Parameter 2</param>
            <returns>The value returned by the function</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Call3(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Do a function call with 3 parameters.
            </summary>
            <param name="name">The name of the function (case insensitive)</param>
            <param name="p1">Parameter 1</param>
            <param name="p2">Parameter 2</param>
            <param name="p3">Parameter 3</param>
            <returns>The value returned by the function</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Call4(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Do a function call with 4 parameters.
            </summary>
            <param name="name">The name of the function (case insensitive)</param>
            <param name="p1">Parameter 1</param>
            <param name="p2">Parameter 2</param>
            <param name="p3">Parameter 3</param>
            <param name="p4">Parameter 4</param>
            <returns>The value returned by the function</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Call5(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Do a function call with 5 parameters.
            </summary>
            <param name="name">The name of the function (case insensitive)</param>
            <param name="p1">Parameter 1</param>
            <param name="p2">Parameter 2</param>
            <param name="p3">Parameter 3</param>
            <param name="p4">Parameter 4</param>
            <param name="p5">Parameter 5</param>
            <returns>The value returned by the function</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Call6(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Do a function call with 6 parameters.
            </summary>
            <param name="name">The name of the function (case insensitive)</param>
            <param name="p1">Parameter 1</param>
            <param name="p2">Parameter 2</param>
            <param name="p3">Parameter 3</param>
            <param name="p4">Parameter 4</param>
            <param name="p5">Parameter 5</param>
            <param name="p6">Parameter 6</param>
            <returns>The value returned by the function</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Call7(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Do a function call with 7 parameters.
            </summary>
            <param name="name">The name of the function (case insensitive)</param>
            <param name="p1">Parameter 1</param>
            <param name="p2">Parameter 2</param>
            <param name="p3">Parameter 3</param>
            <param name="p4">Parameter 4</param>
            <param name="p5">Parameter 5</param>
            <param name="p6">Parameter 6</param>
            <param name="p7">Parameter 7</param>
            <returns>The value returned by the function</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Call8(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Do a function call with 8 parameters.
            </summary>
            <param name="name">The name of the function (case insensitive)</param>
            <param name="p1">Parameter 1</param>
            <param name="p2">Parameter 2</param>
            <param name="p3">Parameter 3</param>
            <param name="p4">Parameter 4</param>
            <param name="p5">Parameter 5</param>
            <param name="p6">Parameter 6</param>
            <param name="p7">Parameter 7</param>
            <param name="p8">Parameter 8</param>
            <returns>The value returned by the function</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Call9(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Do a function call with 9 parameters.
            </summary>
            <param name="name">The name of the function (case insensitive)</param>
            <param name="p1">Parameter 1</param>
            <param name="p2">Parameter 2</param>
            <param name="p3">Parameter 3</param>
            <param name="p4">Parameter 4</param>
            <param name="p5">Parameter 5</param>
            <param name="p6">Parameter 6</param>
            <param name="p7">Parameter 7</param>
            <param name="p8">Parameter 8</param>
            <param name="p9">Parameter 9</param>
            <returns>The value returned by the function</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Call10(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Do a function call with 10 parameters.
            </summary>
            <param name="name">The name of the function (case insensitive)</param>
            <param name="p1">Parameter 1</param>
            <param name="p2">Parameter 2</param>
            <param name="p3">Parameter 3</param>
            <param name="p4">Parameter 4</param>
            <param name="p5">Parameter 5</param>
            <param name="p6">Parameter 6</param>
            <param name="p7">Parameter 7</param>
            <param name="p8">Parameter 8</param>
            <param name="p9">Parameter 9</param>
            <param name="p10">Parameter 10</param>
            <returns>The value returned by the function</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Call11(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Do a function call with 11 parameters.
            </summary>
            <param name="name">The name of the function (case insensitive)</param>
            <param name="p1">Parameter 1</param>
            <param name="p2">Parameter 2</param>
            <param name="p3">Parameter 3</param>
            <param name="p4">Parameter 4</param>
            <param name="p5">Parameter 5</param>
            <param name="p6">Parameter 6</param>
            <param name="p7">Parameter 7</param>
            <param name="p8">Parameter 8</param>
            <param name="p9">Parameter 9</param>
            <param name="p10">Parameter 10</param>
            <param name="p11">Parameter 11</param>
            <returns>The value returned by the function</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Call12(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Do a function call with 12 parameters.
            </summary>
            <param name="name">The name of the function (case insensitive)</param>
            <param name="p1">Parameter 1</param>
            <param name="p2">Parameter 2</param>
            <param name="p3">Parameter 3</param>
            <param name="p4">Parameter 4</param>
            <param name="p5">Parameter 5</param>
            <param name="p6">Parameter 6</param>
            <param name="p7">Parameter 7</param>
            <param name="p8">Parameter 8</param>
            <param name="p9">Parameter 9</param>
            <param name="p10">Parameter 10</param>
            <param name="p11">Parameter 11</param>
            <param name="p12">Parameter 12</param>
            <returns>The value returned by the function</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Call13(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Do a function call with 13 parameters.
            </summary>
            <param name="name">The name of the function (case insensitive)</param>
            <param name="p1">Parameter 1</param>
            <param name="p2">Parameter 2</param>
            <param name="p3">Parameter 3</param>
            <param name="p4">Parameter 4</param>
            <param name="p5">Parameter 5</param>
            <param name="p6">Parameter 6</param>
            <param name="p7">Parameter 7</param>
            <param name="p8">Parameter 8</param>
            <param name="p9">Parameter 9</param>
            <param name="p10">Parameter 10</param>
            <param name="p11">Parameter 11</param>
            <param name="p12">Parameter 12</param>
            <param name="p13">Parameter 13</param>
            <returns>The value returned by the function</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Call14(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Do a function call with 14 parameters.
            </summary>
            <param name="name">The name of the function (case insensitive)</param>
            <param name="p1">Parameter 1</param>
            <param name="p2">Parameter 2</param>
            <param name="p3">Parameter 3</param>
            <param name="p4">Parameter 4</param>
            <param name="p5">Parameter 5</param>
            <param name="p6">Parameter 6</param>
            <param name="p7">Parameter 7</param>
            <param name="p8">Parameter 8</param>
            <param name="p9">Parameter 9</param>
            <param name="p10">Parameter 10</param>
            <param name="p11">Parameter 11</param>
            <param name="p12">Parameter 12</param>
            <param name="p13">Parameter 13</param>
            <param name="p14">Parameter 14</param>
            <returns>The value returned by the function</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Call15(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Do a function call with 15 parameters.
            </summary>
            <param name="name">The name of the function (case insensitive)</param>
            <param name="p1">Parameter 1</param>
            <param name="p2">Parameter 2</param>
            <param name="p3">Parameter 3</param>
            <param name="p4">Parameter 4</param>
            <param name="p5">Parameter 5</param>
            <param name="p6">Parameter 6</param>
            <param name="p7">Parameter 7</param>
            <param name="p8">Parameter 8</param>
            <param name="p9">Parameter 9</param>
            <param name="p10">Parameter 10</param>
            <param name="p11">Parameter 11</param>
            <param name="p12">Parameter 12</param>
            <param name="p13">Parameter 13</param>
            <param name="p14">Parameter 14</param>
            <param name="p15">Parameter 15</param>
            <returns>The value returned by the function</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Call16(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Do a function call with 16 parameters.
            </summary>
            <param name="name">The name of the function (case insensitive)</param>
            <param name="p1">Parameter 1</param>
            <param name="p2">Parameter 2</param>
            <param name="p3">Parameter 3</param>
            <param name="p4">Parameter 4</param>
            <param name="p5">Parameter 5</param>
            <param name="p6">Parameter 6</param>
            <param name="p7">Parameter 7</param>
            <param name="p8">Parameter 8</param>
            <param name="p9">Parameter 9</param>
            <param name="p10">Parameter 10</param>
            <param name="p11">Parameter 11</param>
            <param name="p12">Parameter 12</param>
            <param name="p13">Parameter 13</param>
            <param name="p14">Parameter 14</param>
            <param name="p15">Parameter 15</param>
            <param name="p16">Parameter 16</param>
            <returns>The value returned by the function</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Call17(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Do a function call with 17 parameters.
            </summary>
            <param name="name">The name of the function (case insensitive)</param>
            <param name="p1">Parameter 1</param>
            <param name="p2">Parameter 2</param>
            <param name="p3">Parameter 3</param>
            <param name="p4">Parameter 4</param>
            <param name="p5">Parameter 5</param>
            <param name="p6">Parameter 6</param>
            <param name="p7">Parameter 7</param>
            <param name="p8">Parameter 8</param>
            <param name="p9">Parameter 9</param>
            <param name="p10">Parameter 10</param>
            <param name="p11">Parameter 11</param>
            <param name="p12">Parameter 12</param>
            <param name="p13">Parameter 13</param>
            <param name="p14">Parameter 14</param>
            <param name="p15">Parameter 15</param>
            <param name="p16">Parameter 16</param>
            <param name="p17">Parameter 17</param>
            <returns>The value returned by the function</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Call18(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Do a function call with 18 parameters.
            <param name="name">The name of the function (case insensitive)</param>
            <param name="p1">Parameter 1</param>
            <param name="p2">Parameter 2</param>
            <param name="p3">Parameter 3</param>
            <param name="p4">Parameter 4</param>
            <param name="p5">Parameter 5</param>
            <param name="p6">Parameter 6</param>
            <param name="p7">Parameter 7</param>
            <param name="p8">Parameter 8</param>
            <param name="p9">Parameter 9</param>
            <param name="p10">Parameter 10</param>
            <param name="p11">Parameter 11</param>
            <param name="p12">Parameter 12</param>
            <param name="p13">Parameter 13</param>
            <param name="p14">Parameter 14</param>
            <param name="p15">Parameter 15</param>
            <param name="p16">Parameter 16</param>
            <param name="p17">Parameter 17</param>
            <param name="p18">Parameter 18</param>
            </summary>
            <returns>The value returned by the function</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Call19(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Do a function call with 19 parameters.
            <param name="name">The name of the function (case insensitive)</param>
            <param name="p1">Parameter 1</param>
            <param name="p2">Parameter 2</param>
            <param name="p3">Parameter 3</param>
            <param name="p4">Parameter 4</param>
            <param name="p5">Parameter 5</param>
            <param name="p6">Parameter 6</param>
            <param name="p7">Parameter 7</param>
            <param name="p8">Parameter 8</param>
            <param name="p9">Parameter 9</param>
            <param name="p10">Parameter 10</param>
            <param name="p11">Parameter 11</param>
            <param name="p12">Parameter 12</param>
            <param name="p13">Parameter 13</param>
            <param name="p14">Parameter 14</param>
            <param name="p15">Parameter 15</param>
            <param name="p16">Parameter 16</param>
            <param name="p17">Parameter 17</param>
            <param name="p18">Parameter 18</param>
            <param name="p19">Parameter 19</param>
            </summary>
            <returns>The value returned by the function</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.F.Call20(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Do a function call with 20 parameters.
            </summary>
            <param name="name">The name of the function (case insensitive)</param>
            <param name="p1">Parameter 1</param>
            <param name="p2">Parameter 2</param>
            <param name="p3">Parameter 3</param>
            <param name="p4">Parameter 4</param>
            <param name="p5">Parameter 5</param>
            <param name="p6">Parameter 6</param>
            <param name="p7">Parameter 7</param>
            <param name="p8">Parameter 8</param>
            <param name="p9">Parameter 9</param>
            <param name="p10">Parameter 10</param>
            <param name="p11">Parameter 11</param>
            <param name="p12">Parameter 12</param>
            <param name="p13">Parameter 13</param>
            <param name="p14">Parameter 14</param>
            <param name="p15">Parameter 15</param>
            <param name="p16">Parameter 16</param>
            <param name="p17">Parameter 17</param>
            <param name="p18">Parameter 18</param>
            <param name="p19">Parameter 19</param>
            <param name="p20">Parameter 20</param>
            <returns>The value returned by the function</returns>
        </member>
        <member name="E:SmallBasicEV3Extension.F.Start">
            <summary>
            This property must be set to a subprogram before a subsequent F.Function operation is done which actually defines the function.
            </summary>
        </member>
        <member name="T:SmallBasicEV3Extension.LCD">
            <summary>
            Control the LCD display on the EV3 brick.
            The EV3 has a black-and-white display with 178x128 pixels. All pixels are addressed with X,Y coordinates where X=0 is the left edge and Y=0 is the top edge.
            </summary>
        </member>
        <member name="M:SmallBasicEV3Extension.LCD.StopUpdate">
            <summary>
            Memorize all subsequent changes to the display instead of directly drawing them.
            At the next call to Update(), these changes will be finally drawn.
            You can use this feature to prevent flickering or to speed up drawing complex things to the LCD.
            </summary>
        </member>
        <member name="M:SmallBasicEV3Extension.LCD.Update">
            <summary>
            Draw all changes to the display that have happened since the last call to StopUpdate().
            After Update() everything will again be drawn directly unless you use the StopUpdate() once more.
            </summary>
        </member>
        <member name="M:SmallBasicEV3Extension.LCD.Clear">
            <summary>
            Set all pixels of the display to white.
            </summary>
        </member>
        <member name="M:SmallBasicEV3Extension.LCD.Pixel(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Set a single pixel on the display to a color.
            </summary>
            <param name="color">0 (white) or 1 (black)</param>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:SmallBasicEV3Extension.LCD.Line(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Set a straight line of pixels to a color.
            </summary>
            <param name="color">0 (white) or 1 (black)</param>
            <param name="x1">X coordinate of start point</param>
            <param name="y1">Y coordinate of start point</param>
            <param name="x2">X coordinate of end point</param>
            <param name="y2">Y coordinate of end point</param>
        </member>
        <member name="M:SmallBasicEV3Extension.LCD.Circle(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draws a circle in the given color.
            </summary>
            <param name="color">0 (white) or 1 (black)</param>
            <param name="x">X coordinate of center point</param>
            <param name="y">Y coordinate of center point</param>
            <param name="radius">Radius of the circle</param>
        </member>
        <member name="M:SmallBasicEV3Extension.LCD.Text(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Write a given text (or number) in a color to the display
            </summary>
            <param name="color">0 (white) or 1 (black)</param>
            <param name="x">X coordinate where text starts</param>
            <param name="y">Y coordinate of the top corner</param>
            <param name="font">Size of the letters: 0 (TINY), 1 (SMALL), 2 (BIG)</param>
            <param name="text">The text (or number) to write to the display</param>
        </member>
        <member name="M:SmallBasicEV3Extension.LCD.Write(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Write a given text (or number) in black color to the display.
            When you need more control over the visual appearance, use the function 'Text' instead.
            </summary>
            <param name="x">X coordinate where text starts</param>
            <param name="y">Y coordinate of the top corner</param>
            <param name="text">The text (or number) to write to the display</param>
        </member>
        <member name="M:SmallBasicEV3Extension.LCD.FillRect(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Fill a rectangle with a color.
            </summary>
            <param name="color">0 (white) or 1 (black)</param>
            <param name="x">Left edge of rectangle</param>
            <param name="y">Top edge of rectangle</param>
            <param name="width">Width of rectangle</param>
            <param name="height">Height of rectangle</param>
        </member>
        <member name="M:SmallBasicEV3Extension.LCD.Rect(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw an outline of a rectangle with a color.
            </summary>
            <param name="color">0 (white) or 1 (black)</param>
            <param name="x">Left edge of rectangle</param>
            <param name="y">Top edge of rectangle</param>
            <param name="width">Width of rectangle</param>
            <param name="height">Height of rectangle</param>
        </member>
        <member name="M:SmallBasicEV3Extension.LCD.InverseRect(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Invert the colors of all pixels inside of a rectangle
            </summary>
            <param name="x">Left edge of rectangle</param>
            <param name="y">Top edge of rectangle</param>
            <param name="width">Width of rectangle</param>
            <param name="height">Height of rectangle</param>
        </member>
        <member name="M:SmallBasicEV3Extension.LCD.FillCircle(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draws a filled circle with a given color.
            </summary>
            <param name="color">0 (white) or 1 (black)</param>
            <param name="x">X coordinate of center point</param>
            <param name="y">Y coordinate of center point</param>
            <param name="radius">Radius of the circle</param>
        </member>
        <member name="M:SmallBasicEV3Extension.LCD.BmpFile(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw a bitmap file in a given color to the display. Only files in .rgf format are supported.
            </summary>
            <param name="color">0 (white) or 1 (black)</param>
            <param name="x">X coordinate of left edge</param>
            <param name="y">Y coordinate of top edge</param>
            <param name="filename">Name of the bitmap file without the .rgf extension. This filename can be relative to the 'prjs' folder or an absolute path (when starting with '/').</param>
        </member>
        <member name="T:SmallBasicEV3Extension.EV3">
            <summary>
            Small utility functions that concern the EV3 brick as a whole.
            </summary>
        </member>
        <member name="M:SmallBasicEV3Extension.EV3.SetLEDColor(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Set the color of the brick LED light and the effect to use for it.
            </summary>
            <param name="color">Can be "OFF", "GREEN", "RED", "ORANGE"</param>
            <param name="effect">Can be "NORMAL", "FLASH", "PULSE"</param>
        </member>
        <member name="M:SmallBasicEV3Extension.EV3.SystemCall(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Execute one system command by the command shell of the EV3 linux system. All threads of the virtual machine are halted until the system command is finished.
            </summary>
            <param name="commandline">The system command</param>
            <returns>Exit status of the command</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.EV3.QueueNextCommand">
            <summary>
            Increase performance when program runs in "PC mode": Do not send next command to the brick immediately, but wait until one more command is issued which will then be sent together with the first one. You can bunch more commands together by using an additional call to QueueNextCommand before any command that should be placed into the queue.
            In "brick mode", this command has no effect.
            </summary>
        </member>
        <member name="P:SmallBasicEV3Extension.EV3.Time">
            <summary>
            The time in milliseconds since the program was started.
            </summary>
        </member>
        <member name="P:SmallBasicEV3Extension.EV3.BatteryLevel">
            <summary>
            The current charge level of the battery (range 0 to 100).
            </summary>
        </member>
        <member name="P:SmallBasicEV3Extension.EV3.BatteryVoltage">
            <summary>
            The current charge level of the battery in volts.
            </summary>
        </member>
        <member name="P:SmallBasicEV3Extension.EV3.BatteryCurrent">
            <summary>
            The electric current being consumed from the battery in amperes.
            </summary>
        </member>
        <member name="P:SmallBasicEV3Extension.EV3.BrickName">
            <summary>
            The individual name of the EV3 brick.
            </summary>
        </member>
        <member name="T:SmallBasicEV3Extension.Motor">
            <summary>
            Control the Motors connected to the EV3 Brick.
            For every Motor function you need to specify one or more motor ports that should be affected (for example, "A", "BC", "ABD").
            When additional bricks are daisy-chained to the master brick, address the correct port by adding the layer number to the specifier (for example, "3BC", "2A"). In this case only the motors of one brick can be accessed with a single command.
            Speed vs. Power: When requesting to drive a motor with a certain speed, the electrical power will be permanently adjusted to keep the motor on this speed regardless of the necessary driving force (as long as enough power can be provided). When requesting a certain power instead, the motor will be provided with just this much electrical power and the actual speed will then depend on the resistance it meets.
            </summary>
        </member>
        <member name="M:SmallBasicEV3Extension.Motor.Stop(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Stop one or multiple motors. This will also cancel any scheduled movement for this motor.
            </summary>
            <param name="ports">Motor port name(s)</param>
            <param name="brake">"True", if the motor should use the brake</param>
        </member>
        <member name="M:SmallBasicEV3Extension.Motor.Start(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Start one or more motors with the requested speed or set an already running motor to this speed.
            </summary>
            <param name="ports">Motor port name(s)</param>
            <param name="speed">Speed value from -100 (full reverse) to 100 (full forward)</param>
        </member>
        <member name="M:SmallBasicEV3Extension.Motor.StartPower(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Start one or more motors with the requested power or set an already running motor to this power.
            </summary>
            <param name="ports">Motor port name(s)</param>
            <param name="power">Power value from -100 (full reverse) to 100 (full forward)</param>
        </member>
        <member name="M:SmallBasicEV3Extension.Motor.StartSteer(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Set two motors to run with a specified speed and relative ratio.
            This ratio is determined by the 'turn' parameter which basically determines
            into which direction a vehicle with a simple two-wheel drive would make its turn (given that the motor with the lower port letter is mounted on the left side).
            The two motors will be synchronized which means that when one motor experiences some resistance and cannot keep up its speed, the other motor will also slow down or stop altogether. This is especially useful for vehicles with two independently driven wheels which still need to go straight or make a specified turn.
            The motors will keep running until stopped by another command.
            </summary>
            <param name="ports">Name of two motor ports (for example "AB" or "CD")</param>
            <param name="speed">Speed value from -100 (full reverse) to 100 (full forward) for the faster motor</param>
            <param name="turn">Turn ratio from -100 (rotating left on the spot) to 100 (rotating right on the spot)</param>
        </member>
        <member name="M:SmallBasicEV3Extension.Motor.StartSync(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Set two motors to run synchronized at their chosen speed levels.
            The two motors will be synchronized which means that when one motor experiences some resistance and cannot keep up its speed, the other motor will also slow down or stop altogether. This is especially useful for vehicles with two independently driven wheels which still need to go straight or make a specified turn.
            The motors will keep running until stopped by another command.
            </summary>
            <param name="ports">Name of two motor ports (for example "AB" or "CD")</param>
            <param name="speed1">Speed value from -100 (full reverse) to 100 (full forward) of the motor with the lower port letter</param>
            <param name="speed2">Speed value from -100 (full reverse) to 100 (full forward) of the motor with the higher port letter</param>
        </member>
        <member name="M:SmallBasicEV3Extension.Motor.GetSpeed(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Query the current speed of a single motor.
            Note that this command does not work for motors connected via daisy-chaining.
            </summary>
            <param name="port">Motor port name</param>
            <returns>Current speed in range -100 to 100</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.Motor.IsBusy(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if one or more motors are currently running.
            </summary>
            <param name="ports">Motor port name(s)</param>
            <returns>"True" if at least one of the motors is running, "False" otherwise.</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.Motor.Schedule(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Move one or more motors with the specified speed values. The speed can be adjusted along the total rotation to get a soft start and a soft stop if needed.
            The total angle to rotate the motor is degrees1+degrees2+degrees3. At the end of the movement, the motor stops automatically (with or without using the brake).
            This function returns immediately. You can use IsBusy() to detect the end of the movement or call Wait() to wait until the movement is finished.
            </summary>
            <param name="ports">Motor port name(s)</param>
            <param name="speed">Speed level from -100 (full reverse) to 100 (full forward)</param>
            <param name="degrees1">The part of the rotation during which to accelerate</param>
            <param name="degrees2">The part of the rotation with uniform motion</param>
            <param name="degrees3">The part of the rotation during which to decelerate</param>
            <param name="brake">"True", if the motor(s) should switch on the brake after movement</param>
        </member>
        <member name="M:SmallBasicEV3Extension.Motor.SchedulePower(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Move one or more motors with the specified power. The power can be adjusted along the total rotation to get a soft start and a soft stop if needed.
            The total angle to rotate the motor is degrees1+degrees2+degrees3. At the end of the movement, the motor stops automatically (with or without using the brake).
            This function returns immediately. You can use IsBusy() to detect the end of the movement or call Wait() to wait until the movement is finished.
            </summary>
            <param name="ports">Motor port name(s)</param>
            <param name="power">Power level from -100 (full reverse) to 100 (full forward)</param>
            <param name="degrees1">The part of the rotation during which to accelerate</param>
            <param name="degrees2">The part of the rotation with uniform motion</param>
            <param name="degrees3">The part of the rotation during which to decelerate</param>
            <param name="brake">"True", if the motor(s) should switch on the brake after movement</param>
        </member>
        <member name="M:SmallBasicEV3Extension.Motor.ScheduleSteer(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Move 2 motors a defined number of degrees with a specified speed and relative ratio.
            This ratio is determined by the 'turn' parameter which basically determines
            into which direction a vehicle with a simple two-wheel drive would make its turn (given that the motor with the lower port letter is mounted on the left side).
            The two motors are synchronized which means that when one motor experiences some resistance and cannot keep up its speed, the other motor will also slow down or stop altogether. This is especially useful for vehicles with two independently driven wheels which still need to go straight or make a specified turn.
            The distance to move is for the motor with the higher speed.
            This function returns immediately. You can use IsBusy() to detect the end of the movement or call Wait() to wait until movement is finished.
            </summary>
            <param name="ports">Names of 2 motor ports (for example "AB" or "CD"</param>
            <param name="speed">Speed value from -100 (full reverse) to 100 (full forward) of the faster motor</param>
            <param name="turn">Turn ratio from -100 (rotating left on the spot) to 100 (rotating right on the spot)</param>
            <param name="degrees">The angle through which the faster motor should rotate</param>
            <param name="brake">"True", if the motors should switch on the brake after movement</param>
        </member>
        <member name="M:SmallBasicEV3Extension.Motor.ScheduleSync(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Move 2 motors synchronously a defined number of degrees.
            The two motors are synchronized which means that when one motor experiences some resistance and cannot keep up its speed, the other motor will also slow down or stop altogether. This is especially useful for vehicles with two independently driven wheels which still need to go straight or make a specified turn.
            The distance to move is for the motor with the higher speed.
            This function returns immediately. You can use IsBusy() to detect the end of the movement or call Wait() to wait until movement is finished.
            </summary>
            <param name="ports">Names of 2 motor ports (for example "AB" or "CD"</param>
            <param name="speed1">Speed value from -100 (full reverse) to 100 (full forward) of the motor with the lower port letter</param>
            <param name="speed2">Speed value from -100 (full reverse) to 100 (full forward) of the motor with the higher port letter</param>
            <param name="degrees">The angle through which the faster motor should rotate</param>
            <param name="brake">"True", if the motors should switch on the brake after movement</param>
        </member>
        <member name="M:SmallBasicEV3Extension.Motor.ResetCount(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Set the rotation count of one or more motors to 0.
            </summary>
            <param name="ports">Motor port name(s)</param>
        </member>
        <member name="M:SmallBasicEV3Extension.Motor.GetCount(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Query the current rotation count of a single motor.
            As long as the counter is not reset it will accurately measure all movements of a motor, even if the motor is driven by some external force while not actively running.
            Note that this command does not work for motors connected via daisy-chaining.
            </summary>
            <param name="port">Motor port name</param>
            <returns>The current rotation count in degrees</returns>
        </member>
        <member name="M:SmallBasicEV3Extension.Motor.Move(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Move one or more motors with the specified speed the specified angle (in degrees).
            This command will block execution until the motor has reached its destination.
            When you need finer control over the movement (soft acceleration or deceleration), consider using the command Motor.Schedule instead.
            </summary>
            <param name="ports">Motor port name(s)</param>
            <param name="speed">Speed level from -100 (full reverse) to 100 (full forward)</param>
            <param name="degrees">The angle to rotate</param>
            <param name="brake">"True", if the motor(s) should switch on the brake after movement</param>
        </member>
        <member name="M:SmallBasicEV3Extension.Motor.MovePower(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Move one or more motors with the specified power the specified angle (in degrees).
            This command will block execution until the motor has reached its destination.
            When you need finer control over the movement (soft acceleration or deceleration), consider using the command Motor.SchedulePower instead.
            </summary>
            <param name="ports">Motor port name(s)</param>
            <param name="power">Power level from -100 (full reverse) to 100 (full forward)</param>
            <param name="degrees">The angle to rotate</param>
            <param name="brake">"True", if the motor(s) should switch on the brake after movement</param>
        </member>
        <member name="M:SmallBasicEV3Extension.Motor.MoveSteer(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Move 2 motors a defined number of degrees with a specified speed and relative ratio.
            This ratio is determined by the 'turn' parameter which basically determines
            into which direction a vehicle with a simple two-wheel drive would make its turn (given that the motor with the lower port letter is mounted on the left side).
            The two motors are synchronized which means that when one motor experiences some resistance and cannot keep up its speed, the other motor will also slow down or stop altogether. This is especially useful for vehicles with two independently driven wheels which still need to go straight or make a specified turn.
            The angle to move is for the motor with the higher speed.
            </summary>
            <param name="ports">Names of 2 motor ports (for example "AB" or "CD"</param>
            <param name="speed">Speed value from -100 (full reverse) to 100 (full forward) of the faster motor</param>
            <param name="turn">Turn ratio from -100 (rotating left on the spot) to 100 (rotating right on the spot)</param>
            <param name="degrees">The angle of the faster motor to rotate</param>
            <param name="brake">"True", if the motors should switch on the brake after movement</param>
        </member>
        <member name="M:SmallBasicEV3Extension.Motor.MoveSync(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Moves 2 motors synchronously a defined number of degrees.
            The two motors are synchronized which means that when one motor experiences some resistance and cannot keep up its speed, the other motor will also slow down or stop altogether. This is especially useful for vehicles with two independently driven wheels which still need to go straight or make a specified turn.
            The angle to move is for the motor with the higher speed.
            </summary>
            <param name="ports">Names of 2 motor ports (for example "AB" or "CD"</param>
            <param name="speed1">Speed value from -100 (full reverse) to 100 (full forward) of the motor with the lower port letter.</param>
            <param name="speed2">Speed value from -100 (full reverse) to 100 (full forward) of the motor with the higher port letter.</param>
            <param name="degrees">The angle of the faster motor to rotate</param>
            <param name="brake">"True", if the motors should switch on the brake after movement</param>
        </member>
        <member name="M:SmallBasicEV3Extension.Motor.Wait(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Wait until the specified motor(s) has finished a "Schedule..." or "Move..." operation.
            Using this method is normally better than calling IsBusy() in a tight loop.
            </summary>
            <param name="ports">Motor port name(s)</param>
        </member>
        <member name="M:SmallBasicEV3Extension.Motor.Invert(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Invert the polarity (direction) of one or more motors. This will affect all future commands that move this motors and also the tacho and speed readings will deliver inverted values.
            This operation makes it easy to change the way a motor is built into a robot without altering the rest of the program.
            You just need to add a single Motor.Invert() command at the very start of the program. Note that there is intentionally no way to disable the inversion later on.
            </summary>
            <param name="ports">Motor port name(s)</param>
        </member>
        <member name="T:SmallBasicEV3Extension.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SmallBasicEV3Extension.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SmallBasicEV3Extension.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
         <!--<member name="T:SmallBasicEV3Extension.Sensor">
            <summary>
            Access sensors that are attached to the brick.
            To specify the sensor use the port number which is printed below the socket on the brick (for example 1).
            To access sensors of further bricks that are connected via daisy-chaining, use the next higher numbers instead (5 - 8 will access the sensors on the first daisy-chained brick, 9-12 the sensors on the next one and so on).
            </summary>
        </member>-->
        <member name="T:SmallBasicEV3Extension.Sensor">
            <summary>
            Acessa os sensores conectados ao brick.
            Para especificar o sensor use o número da porta que está impresso embaixo da entrada no brick (por exemplo 1).
            Para acessar sensores de outros bricks que estão conectados via encadeamento (Daisy-Chaining), use os próximos números na sequência (5 - 8 vai acessar os sensores no primeiro brick encadeado, 9 - 12 os sensores no segundo, e assim sucessivamente).
            </summary>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Sensor.GetName(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Get the name and mode of a currently connected sensor.
            This function is mainly intended for diagnostic use because you normally know which sensor is plugged to which port on the model.
            </summary>
            <param name="port">Number of the sensor port</param>
            <returns>Description text (for example, "TOUCH")</returns>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Sensor.GetName(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Obtém o nome e o modo de um sensor conectado.
            Essa função é usada primariamente para diagnósticos, pois você normalmente sabe qual sensor está conectado em qual porta no brick.
            </summary>
            <param name="port">Número da porta do sensor</param>
            <returns>Texto descritivo (por exemplo, “TOUCH”)</returns>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Sensor.GetType(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Get the numerical type identifier of a currently connected sensor.
            </summary>
            <param name="port">Number of the sensor port</param>
            <returns>Sensor type identifier (for example, 16 for a touch sensor)</returns>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Sensor.GetType(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Obtém o identificador de tipo numérico de um sensor conectado.
            </summary>
            <param name="port">Número da porta do sensor</param>
            <returns>Identificador de tipo do sensor (por exemplo, 16 para um sensor de toque)</returns>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Sensor.GetMode(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Get current operation mode of a sensor.
            Many sensors can work in substantially different modes. For example, the color sensor can detect ambient light, reflected light or color. When the sensor is plugged in it will normally start with mode 0, but that can be changed later by the program.
            </summary>
            <param name="port">Number of the sensor port</param>
            <returns>Current operation mode (0 is always the default mode)</returns>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Sensor.GetMode(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Obtém o identificador do modo de operação atual de um sensor.
            Muitos sensores podem funcionar de modos muito diferentes. Por exemplo, o sensor de cor pode detectar a luz ambiente, a luz refletida, ou a cor. Quando o sensor é conectado ele normalmente começa no modo 0, mas isso pode ser alterado através da programação.
            </summary>
            <param name="port">Número da porta do sensor</param>
            <returns>Identificador do modo de operação atual (0 é sempre o modo padrão)</returns>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Sensor.SetMode(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Switches the mode of a sensor.
            Many sensors can work in different modes giving quite different readings. The meaning of each mode number depends on the specific sensor type. For further info, see the sensor list in the appendix.
            Note that a sensor will stay in the selected mode even after the program stops and another (or the same) program is started. To avoid confusion, best practice is to always set the mode of all used sensors at program start.
            This command blocks execution until mode switching is finished and first sensor data is available.
            </summary>
            <param name="port">Number of the sensor port</param>
            <param name="mode">New mode to switch to. This only succeeds when the mode is indeed supported by the sensor.</param>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Sensor.SetMode(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Altera o modo de um sensor.
            Muitos sensores podem trabalhar de modos diferentes, que retornam leituras muito distintas. O significado de cada identificador varia dependendo do tipo de sensor. Para mais informações, veja a lista de sensores no apêndice.
            Note que o sensor permanecerá no modo selecionado mesmo após o fim do programa, e início do próximo (ou do mesmo) programa. Para evitar confusão, é melhor sempre definir o modo desejado do sensor no início do programa.
            Esse comando bloqueia a execução até que o modo seja trocado, e a primeira resposta do sensor seja recebida.
            </summary>
            <param name="port">Número da porta do sensor</param>
            <param name="mode">Identificador do novo modo. Essa função só tem sucesso quando o modo escolhido for suportado pelo sensor.</param>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Sensor.IsBusy(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Check if a sensor is currently busy switching mode or in process of initialization. After mode switching a sensor may take some time to become ready again.
            </summary>
            <param name="port">Number of the sensor port</param>
            <returns>"True" if the sensor is currently busy</returns>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Sensor.IsBusy(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checa se um sensor está ocupado trocando de modo ou inicializando. Após a troca de modo o sensor pode demorar um pouco para ficar disponível novamente.
            </summary>
            <param name="port">Número da porta do sensor</param>
            <returns>“True” se o sensor estiver ocupado</returns>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Sensor.Wait(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Wait until a sensor has finished its reconfiguration. When no sensor is plugged into the port, this function returns immediately.
            Normally you would not need to call this command, because SetMode() blocks until the sensor is ready anyway. It can be useful in special circumstances, like when the mode was switched by a different thread, or when a sensor is plugged into the brick at runtime.
            </summary>
            <param name="port">Number of the sensor port</param>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Sensor.Wait(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Espera até que o sensor termine sua reconfiguração. Quando nenhum sensor está conectado, essa função retorna imediatamente.
            Normalmente você não precisaria usar esse comando, pois a função SetMode() bloqueia a execução até que o sensor esteja pronto de qualquer forma. Ela pode ser útil em circunstâncias especiais, por exemplo se o modo for trocado por outra linha de execução (Thread), ou quando um sensor é conectado durante a execução do programa.
            </summary>
            <param name="port">Número da porta do sensor</param>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Sensor.ReadPercent(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Read the current sensor value and apply some sensible percentage scaling.
            Most sensors can translate the current reading to a meaningful single percentage value like light intensity or button press state.
            </summary>
            <param name="port">Number of the sensor port</param>
            <returns>The percentage value (For example, the touch sensor gives 100 for pressed and 0 for non-pressed)</returns>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Sensor.ReadPercent(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Lê o valor atual do sensor, e aplica uma escala de porcentagem razoável.
            A maioria dos sensores pode converter o seu valor de leitura para um valor significativo de porcentagem, como intensidade de luz ou estado de um botão.
            </summary>
            <param name="port">Número da porta do sensor</param>
            <returns>O valor da porcentagem (por exemplo, o sensor de toque retorna 100 quando pressionado, e 0 quando não pressionado)</returns>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Sensor.ReadRaw(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Read current sensor value where the result from ReadPercent() is not specific enough.
            Some sensor modes deliver values that cannot be translated to percentage (for example a color index) or that contain multiple values at once (for example the individual red, green, blue light intensities that make up RGB).
            </summary>
            <param name="port">Number of the sensor port</param>
            <param name="values">Requested size of result array</param>
            <returns>An array holding the requested number of values. Index starts at 0. Elements that got no data are set to 0.</returns>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Sensor.ReadRaw(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Lê o valor atual do sensor quando o resultado da função ReadPercent() não é específico o suficiente.
            Alguns modos de sensores retornam valores que não podem ser convertidos para porcentagem (por exemplo uma escala de cor) ou que contenham muitos valores de uma vez (por exemplo o valor individual de intensidade de luz vermelha, verde e azul que compõe o RGB)
            </summary>
            <param name="port">Número da porta do sensor</param>
            <param name="values">Tamanho do conjunto (Array) de retorno desejado</param>
            <returns>Um conjunto contendo o número especificado de valores. O índice começa no 0. Elementos que não tem nenhuma informação são considerados 0.</returns>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Sensor.ReadRawValue(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Similar to ReadRaw, but returns only a single raw value instead of an array of raw values.
            </summary>
            <param name="port">Number of the sensor port</param>
            <param name="index">Index of the value that should be picked from the result array (starting with index 0)</param>
            <returns>One element of a raw sensor reading</returns>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Sensor.ReadRawValue(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Similar a função ReadRaw, mas retorna apenas um valor bruto ao invés de um conjunto (Array) de valores.
            </summary>
            <param name="port">Número da porta do sensor</param>
            <param name="index">Índice do valor que deve ser buscado do conjunto resultante (começa no índice 0)</param>
            <returns>Um elemento de uma leitura bruta do sensor</returns>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Sensor.CommunicateI2C(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Communicates with devices using the I2C protocol over one of the sensor ports.
            This command addresses one device on the I2C-bus and can send and receive multiple bytes. This feature could be used to attach a custom sensor or to communicate with any device that is capable of being connected to the I2C bus as a slave.
            Note that this command does not work over daisy-chaining.
            </summary>
            <param name="port">Number of the sensor port</param>
            <param name="address">Address (0 - 127) of the I2C slave on the I2C bus</param>
            <param name="writebytes">Number of bytes to write to the slave (maximum 31)</param>
            <param name="readbytes">Number of bytes to request from the slave (maximum 32, minimum 1)</param>
            <param name="writedata">Array holding the data bytes to be sent (starting at 0)</param>
            <returns>An array holding the requested number of values. Index starts at 0</returns>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Sensor.CommunicateI2C(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Se comunica com outros dispositivos usando o protocolo I2C através de uma porta de sensor.
            O comando endereça um dispositivo no barramento I2C (I2C- bus) e pode ler e escrever múltiplos bytes. Essa funcionalidade poderia ser usada para conectar um sensor personalizado ou para se comunicar com qualquer dispositivo capaz de ser conectado ao barramento I2C como escravo (Slave).
            Note que esse comando não funciona com encadeamento (Daisy-Chaining).
            </summary>
            <param name="port">Número da porta do sensor</param>
            <param name="address">Endereço (0 - 127) do escravo I2C no barramento</param>
            <param name="writebytes">Número de bytes para escrever no escravo (máximo 31)</param>
            <param name="readbytes">Número de bytes para ler do escravo (máximo 32, mínimo 1)</param>
            <param name="writedata">Conjunto (Array) contendo os bytes de informação à serem escritos (começando no 0)</param>
            <returns>Um conjunto contendo o número requisitado de valores. O índice começa no 0.</returns>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Sensor.ReadI2CRegister(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            This command addresses one device on the I2C-bus and tries to receive the value of a single register of a connected I2C slave.
            Note that this command does not work over daisy-chaining.
            </summary>
            <param name="port">Number of the sensor port</param>
            <param name="address">Address (0 - 127) of the I2C slave on the I2C bus</param>
            <param name="registernumber">Number of register in the slave to read data from</param>
            <returns>The content of the register</returns>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Sensor.ReadI2CRegister(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            O comando endereça um dispositivo no barramento I2C (I2C- bus) e tenta receber o valor de um único registro de um escravo (Slave) conectado.
            Note que esse comando não funciona com encadeamento (Daisy-Chaining).
            </summary>
            <param name="port">Número da porta do sensor</param>
            <param name="address">Endereço (0 - 127) do escravo I2C no barramento</param>
            <param name="registernumber">Número do registro a ser lido do escravo</param>
            <returns>O conteúdo do registro</returns>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Sensor.ReadI2CRegisters(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            This command addresses one device on the I2C-bus and tries to receive the values of multiple registers of a connected I2C slave.
            Note that this command does not work over daisy-chaining.
            </summary>
            <param name="port">Number of the sensor port</param>
            <param name="address">Address (0 - 127) of the I2C slave on the I2C bus</param>
            <param name="registernumber">Number of the first register in the slave to read data from</param>
            <param name="readbytes">How many register to read (maximum 32)</param>
            <returns>An array holding the requested number of values. Index starts at 0</returns>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Sensor.ReadI2CRegisters(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            O comando endereça um dispositivo no barramento I2C (I2C- bus) e tenta receber o valor de múltiplos registros de um escravo (Slave) conectado.
            Note que esse comando não funciona com encadeamento (Daisy-Chaining).
            </summary>
            <param name="port">Número da porta do sensor</param>
            <param name="address">Endereço (0 - 127) do escravo I2C no barramento</param>
            <param name="registernumber">Número do primeiro registro a ser lido do escravo</param>
            <param name="readbytes">Quantos registros se deseja receber (máximo 32)</param>
            <returns>Um conjunto (Array) contendo o número requisitado de valores. O índice começa no 0.</returns>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Sensor.WriteI2CRegister(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            This command addresses one device on the I2C-bus and tries to write the value of a single register of a connected I2C slave.
            Note that this command does not work over daisy-chaining.
            </summary>
            <param name="port">Number of the sensor port</param>
            <param name="address">Address (0 - 127) of the I2C slave on the I2C bus</param>
            <param name="registernumber">Number of the register in the slave to write data to</param>
            <param name="value">Value to write into the register.</param>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Sensor.WriteI2CRegister(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            O comando endereça um dispositivo no barramento I2C (I2C- bus) e tenta escrever um valor em um único registro de um escravo (Slave) conectado.
            Note que esse comando não funciona com encadeamento (Daisy-Chaining).
            </summary>
            <param name="port">Número da porta do sensor</param>
            <param name="address">Endereço (0 - 127) do escravo I2C no barramento</param>
            <param name="registernumber">Número do registro a ser escrito no escravo</param>
            <param name="value">Valor a ser escrito no registro.</param>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Sensor.WriteI2CRegisters(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            This command addresses one device on the I2C-bus and tries to write the values of multiple registers of a connected I2C slave.
            Note that this command does not work over daisy-chaining.
            </summary>
            <param name="port">Number of the sensor port</param>
            <param name="address">Address (0 - 127) of the I2C slave on the I2C bus</param>
            <param name="registernumber">Number of the first register in the slave to write data to</param>
            <param name="writebytes">How many bytes to write into the registers (maximum 30)</param>
            <param name="writedata">Array holding the data bytes to be written (starting at 0)</param>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Sensor.WriteI2CRegisters(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            O comando endereça um dispositivo no barramento I2C (I2C- bus) e tenta escrever um valor em múltiplos registros de um escravo (Slave) conectado.
            Note que esse comando não funciona com encadeamento (Daisy-Chaining).
            </summary>
            <param name="port">Número da porta do sensor</param>
            <param name="address">Endereço (0 - 127) do escravo I2C no barramento</param>
            <param name="registernumber">Número do primeiro registro a ser escrito no escravo</param>
            <param name="writebytes">Quantos bytes se deseja escrever nos registros (máximo 30)</param>
            <param name="writedata">Um conjunto (Array) contendo os bytes de informação a serem escritos (começa no 0)</param>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Sensor.SendUARTData(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Sends data to devices which are attached to the UART (universal asynchronous receiver transmitter) of one of the sensor ports.
            This can be useful to send custom commands to custom made sensors/actuators.
            </summary>
            <param name="port">Number of the sensor port</param>
            <param name="writebytes">Number of bytes to write to the device (maximum 32)</param>
            <param name="writedata">Array holding the data bytes to be sent (starting at 0)</param>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Sensor.SendUARTData(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
           Envia informação para dispositivos conectados no UART (receptor/transmissor universal assíncrono) de uma das portas de sensor.
            Isso pode ser útil para mandar comandos personalizados para sensores/atuadores personalizados.
            </summary>
            <param name="port">Número da porta do sensor</param>
            <param name="writebytes">Número de bytes que se deseja escrever no dispositivo (máximo 32)</param>
            <param name="writedata">Um conjunto (Array) contendo os bytes de informação a serem enviados (começa no 0)</param>
        </member>
        <!--<member name="T:SmallBasicEV3Extension.Mailbox">
            <summary>
            Communication facility to send messages via Bluetooth from brick to brick
            </summary>

        </member>-->
        <member name="T:SmallBasicEV3Extension.Mailbox">
            <summary>
            Recurso de comunicação para enviar mensagens via Bluetooth de brick para brick.
            </summary>

        </member>
        <!--<member name="M:SmallBasicEV3Extension.Mailbox.Create(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Create a mailbox on the local brick that can receive messages from other bricks.
            Only after creation of the box incoming messages can be stored for retrieval.
            There is a total limit of 30 mailboxes that can be created.
            </summary>
            <param name="boxname">Name of the message box to be created.</param>
            <returns>A numerical identifier of the mailbox. This is needed to actually retrieve messages from the box.</returns>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Mailbox.Create(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Cria uma caixa de correio (Mailbox) no brick atual que pode receber mensagens de outros bricks.
            As mensagens recebidas só podem ser armazenadas e buscadas após a criação da caixa de correio.
            Tem um limite total de 30 caixas que podem ser criadas.
            </summary>
            <param name="boxname">Nome da caixa de mensagem a ser criada.</param>
            <returns>Um identificador numérico da caixa de correio. Isso é necessário para que se possa buscar as mensagens da caixa.</returns>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Mailbox.Send(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Send a message to a mailbox on another brick.
            </summary>
            <param name="brickname">The name of the brick to receive the message. A connection to this brick must be already open for this command to work. You can specify empty Text here, in which case the message will be sent to all connected bricks.</param>
            <param name="boxname">Name of the message box on the receiving brick.</param>
            <param name="message">The message as a text. Currently only text messages are supported.</param>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Mailbox.Send(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Manda uma mensagem para uma caixa de correio (Mailbox) em outro brick.
            </summary>
            <param name="brickname">O nome do brick que receberá a mensagem. Uma conexão com esse brick já deve estar estabelecida para que o comando funcione. Se esse parâmetro estiver em branco a mensagem será enviada a todos os bricks conectados.</param>
            <param name="boxname">Nome da caixa de mensagem do brick receptor.</param>
            <param name="message">A mensagem em forma de texto. No momento somente mensagens de texto são suportadas.</param>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Mailbox.IsAvailable(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if there is a message in the specified mailbox.
            </summary>
            <param name="id">Identifier of the local mailbox</param>
            <returns>"True" if there is a message waiting, "False" otherwise</returns>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Mailbox.IsAvailable(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checa se tem uma mensagem na caixa de correio (Mailbox) especificada.
            </summary>
            <param name="id">Identificador da caixa de correio local</param>
            <returns>“True” se houver uma mensagem, “False” se não</returns>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Mailbox.Receive(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Receive the latest message from a local mailbox. When no message is present, the command will block until some message arrives.
            The message will then be consumed and the next call to Receive will wait for the next message.
            To avoid blocking, you can check with IsAvailable() whether there is a message in the box. When no message box with the name exists, the command will return "" immediately.
            </summary>
            <param name="id">Identifier of the local mailbox</param>
            <returns>The message as a Text. Currently only text messages are supported.</returns>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Mailbox.Receive(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Recebe a mensagem mais recente de uma caixa de correio (Mailbox) local. Quando nenhuma mensagem estiver disponível, o comando irá bloquear e esperar até que alguma chegue.
            A mensagem então será consumida, e a próxima chamada da função Receive irá esperar pela próxima mensagem.
            Para evitar o bloqueio você pode checar com a função IsAvaliable() se tem uma mensagem na caixa. Quando nenhuma mensagem com o nome especificado existir, o comando irá retornar “” imediatamente.
            </summary>
            <param name="id">Identificador da caixa de correio local</param>
            <returns>A mensagem em forma de texto. No momento somente mensagens de texto são suportadas.</returns>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Mailbox.Connect(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Tries to establish a Bluetooth connection to another brick if it is not already connected.
            Only after a connection has been made (either by this command or manually from the on-brick menu), messages can be exchanged in both directions.
            </summary>
            <param name="brickname">Name of the remote brick.</param>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Mailbox.Connect(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Tenta estabelecer uma conexão Bluetooth com outro brick, se eles ainda não estiverem conectados.
            Somente após a conexão ser criada (ou através do comando ou manualmente através do menu do brick) é possível trocar mensagens entre os bricks.
            </summary>
            <param name="brickname">Nome do outro brick.</param>
        </member>
        <!--<member name="T:SmallBasicEV3Extension.Speaker">
            <summary>
            Use the brick's built-in speaker to play tones or sound files.
            </summary>
        </member>-->
        <member name="T:SmallBasicEV3Extension.Speaker">
            <summary>
            Usa o auto-falante do brick para reproduzir tons ou arquivos de som.
            </summary>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Speaker.Stop">
            <summary>
            Stop any currently playing sound or tone.
            </summary>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Speaker.Stop">
            <summary>
            Para qualquer tom ou arquivo de som que esteja tocando.
            </summary>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Speaker.Tone(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Start playing a simple tone of defined frequency.
            </summary>
            <param name="volume">Volume can be 0 - 100</param>
            <param name="frequency">Frequency in Hz can be 250 - 10000</param>
            <param name="duration">Duration of the tone in milliseconds</param>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Speaker.Tone(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Começa a tocar um tom simples de frequência definida.
            </summary>
            <param name="volume">Volume pode ser 0 - 100</param>
            <param name="frequency">Frequência em Hz pode ser 250 - 10000</param>
            <param name="duration">Duração do tom em milissegundos</param>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Speaker.Note(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Start playing a simple tone defined by its text representation.
            </summary>
            <param name="volume">Volume can be 0 - 100</param>
            <param name="note">Text defining a note "C4" to "B7" or halftones like "C#5"</param>
            <param name="duration">Duration of the tone in milliseconds</param>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Speaker.Note(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Começa a tocar um tom simples a partir da sua representação de texto.
            </summary>
            <param name="volume">Volume pode ser 0 - 100</param>
            <param name="note">Texto que define a nota, pode ser de “C4” a “B7” ou semitons como “C#5”</param>
            <param name="duration">Duração do tom em milissegundos</param>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Speaker.Play(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Start playing a sound from a sound file stored on the brick. Only files in .rsf format are supported.
            </summary>
            <param name="volume">Volume can be 0 - 100</param>
            <param name="filename">Name of the sound file without the .rsf extension. This filename can be relative to the 'prjs' folder or an absolute path (when starting with '/').</param>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Speaker.Play(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Começa a tocar um som a partir de um arquivo de som presente no brick. Somente arquivos no formato .rsf são suportados.
            </summary>
            <param name="volume">Volume pode ser 0 - 100</param>
            <param name="filename">Nome do arquivo de som sem a extensão .rsf no final. Esse nome pode ser relativo a pasta ‘prjs’ ou a um caminho absoluto (quando iniciado com ‘/’).</param>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Speaker.IsBusy">
            <summary>
            Check whether the speaker is still busy playing a previous sound.
            </summary>
            <returns>"True", if there is a sound still playing, "False" otherwise</returns>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Speaker.IsBusy">
            <summary>
            Checa se o auto-falante ainda está ocupado reproduzindo algum som.
            </summary>
            <returns>“True”, se um som estiver tocando, “False” se não.</returns>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Speaker.Wait">
            <summary>
            Wait until the current sound has finished playing.
            When no sound is playing, this function returns immediately.
            </summary>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Speaker.Wait">
            <summary>
            Espera até que o som atual pare de tocar.
            Quando nenhum som está tocando, esta função retorna imediatamente.
            </summary>
        </member>
        <!--<member name="T:SmallBasicEV3Extension.Thread">
            <summary>
            This object supports the use of threads in a program.
            A thread is a piece of program code that can run independently and at the same time as other parts of the program. For example, you could create a thread that controls the motors, while a different thread can watch sensors or user input.
            Generally speaking, multithreading is quite a complex topic. To really understand it, some extra study is recommended.
            </summary>
        </member>-->
        <member name="T:SmallBasicEV3Extension.Thread">
            <summary>
            Este objeto suporta o uso de linhas de execução (Thread) no programa.
            Uma linha de execução é uma parte do programa que funciona de maneira independente, e simultânea ao resto do programa. Por exemplo, você poderia criar uma linha de execução que controla os motores, enquanto uma outra observa os sensores.
            Elas funcionam de maneira semelhante a linhas de montagem de uma fábrica, dividindo o trabalho e tornando ele mais eficiente, porém, na prática, pode ser mais complexo. Para compreender mais a fundo a sua aplicação, um estudo maior é necessário.
            </summary>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Thread.Yield">
            <summary>
            Explicitly gives up control of the CPU so other threads may do their work.
            Threads are often not really running in parallel because there may be not enough CPUs to exclusively do the work for each thread. Instead, the CPU will do a bit of work on one thread and then jump to the next thread and so on very quickly, to make it look like everything is running in parallel.
            Whenever a thread has nothing to do just now, but needs to wait for some condition to arrive, it can give up the control of the CPU with the Yield() function, so other threads get the chance to do their work.
            </summary>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Thread.Yield">
            <summary>
            Explicitamente abre mão do controle da CPU, para que outras linhas de execução (Thread) possam trabalhar.
            Linhas de execução muitas vezes não estão trabalhando, de fato, em paralelo, porque não existem CPUs o suficiente para trabalhar para cada uma. Na verdade a CPU vai fazer um pouco do trabalho de cada linha, e depois seguir para a próxima, consecutivamente, de maneira muito rápida, fazendo parecer que elas estão funcionando ao mesmo tempo.
            Sempre que uma linha não tem nada para fazer no momento, mas precisa esperar uma condição ser cumprida, ela pode abrir mão do controle da CPU com a função Yield(), para que as outras possam trabalhar.
            </summary>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Thread.CreateMutex">
            <summary>
            Create a mutex (short for "mutual exclusion" handler) that can be used for thread synchronization.
            Only creation of mutexes is supported, but not deletion. Best practice is to create all needed mutexes at program start and keep their numbers in global variables.
            </summary>
            <returns>A number specifying the new mutex. Use this for calls to Lock and Unlock</returns>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Thread.CreateMutex">
            <summary>
            Cria um mutex (abreviação de controlador de “exclusão mútua") que pode ser usado para sincronização de linhas de execução (Thread).
            A deleção de mutexes não é suportada, somente sua criação. O melhor é criar todos os que serão necessários no início do programa, e manter seus valores em variáveis globais.
            </summary>
            <returns>Um número especificando o novo mutex. Use ele para chamar as funções Lock e Unlock</returns>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Thread.Lock(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Tries to lock the given mutex exclusively so no other thread can acquire a lock on it.
            When another thread already holds a lock on the mutex, the current thread will wait until the lock is released and then acquire the lock itself (once the function call returns, the mutex has been successfully locked).
            This locking mechanism is normally used to protect some data structures or other resources from being accessed by two threads concurrently. Every call to Lock must be paired with a call to a subsequent Unlock.
            </summary>
            <param name="mutex">The number of the mutex (as returned from CreateMutex() )</param>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Thread.Lock(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Tenta travar um mutex exclusivamente, para que nenhuma outra linha de execução (Thread) possa travar ele.
            Quando outra linha já travou o mutex, a linha atual vai esperar até que ele seja destravado, para que possa travá-lo(a função retorna quando o mutex foi travado com sucesso).
            Esse mecanismo de trava normalmente é utilizado para proteger algum pedaço do código de ser acessado por duas linhas simultaneamente. Toda chamada da função Lock é seguida de uma chamada da função Unlock.
            </summary>
            <param name="mutex">O número do mutex (gerado pela função CreateMutex() )</param>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Thread.Unlock(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Releases a lock on a mutex. This function must only be called when there was indeed a preceding call to Lock.
            </summary>
            <param name="mutex">The number of the mutex (as returned from CreateMutex() )</param>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Thread.Unlock(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Destrava um mutex. Essa função só deve ser chamada quando precedida pela função Lock.
            </summary>
            <param name="mutex">O número do mutex (gerado pela função CreateMutex() )</param>
        </member>
        <!--<member name="E:SmallBasicEV3Extension.Thread.Run">
            <summary>
            With this property, new threads are created. Just assign a subprogram to this and the subprogram will start running as an independent thread (for example, Thread.Run = MYSUB).
            Any subprogram can be used to create an independent thread, but you can start the same subprogram only as one thread. A second use of Thread.Run, while the specified subprogram is still running, will just add the call to a queue that is processed after the previous run was finished. No runs will be lost in this case, but probably scheduled for a later time.
            Note that even in the presence of running threads, the whole program stops as soon as the main program runs to its end.
            </summary>
        </member>-->-->
        <member name="E:SmallBasicEV3Extension.Thread.Run">
            <summary>
            Com essa função novas linhas de execução (Thread) são criadas. Só atribua um subprograma a essa função, e ele começará a funcionar como uma linha independente(por exemplo, Thread.Run = MEUSUB).
            Qualquer subprograma pode ser usado para criar uma linha de execução, porém cada um pode ser usado somente uma vez. Um segundo uso de Thread.Run, enquanto o subprograma ainda está funcionando, só adiciona mais uma chamada para a fila, que será processada após o fim da outra. Nenhuma chamada será perdida nesse caso, só adiada.
            Note que mesmo que existam linhas funcionando, o programa para assim que o programa principal chegar ao fim.
            </summary>
        </member>
       <!-- <member name="T:SmallBasicEV3Extension.Vector">
            <summary>
             This object allows direct manipulation of larger quantities of numbers.
             These are called vectors and will be stored using arrays with consecutive indices (starting at 0).
             When arrays with different content are given to the operations, every missing array
             element with be treated as being 0.
            </summary>
            </member>-->
        <member name="T:SmallBasicEV3Extension.Vector">
            <summary>
             Esse objeto permite a manipulação direta de grandes quantidades de números.
            Eles são chamados de vetores (Vector), e são armazenados usando conjuntos (Array) de índices consecutivos (começando em 0).
            Quando conjuntos com tamanhos diferentes forem utilizados em operações, todos os elementos faltantes serão considerados 0.
            </summary>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Vector.Init(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Set up a vector of a given size with all elements set to the same value.
            </summary>
            <param name="size">Size of the vector</param>
            <param name="value">The value to use for all elements</param>
            <returns>The created vector</returns>
            </member>-->
        <member name="M:SmallBasicEV3Extension.Vector.Init(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Cria um vetor (Vector) de tamanho especificado com elementos de mesmo valor.
            </summary>
            <param name="size">Tamanho do vetor</param>
            <param name="value">O valor que será usado para todos os elementos</param>
            <returns>O vetor criado</returns>
        </member>
       <!-- <member name="M:SmallBasicEV3Extension.Vector.Data(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Set up a vector of a given size and initialize the elements with data drawn from a text. For this, the text will be split apart on blank spaces and every part is treated as a decimal number.
            For example: V = Vector.Data(4,"47 11 8 15") will result in an number array with the 4 values 47 11 8 15.
            </summary>
            <param name="size">Size of the resulting vector</param>
            <param name="data">Data in text form to be filled into the array. When the text contains too few elements, the vector is padded with 0 to reach the specified number of elements</param>
            <returns>The created vector</returns>
        </member>-->
        <member name="M:SmallBasicEV3Extension.Vector.Data(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Cria um vetor (Vector) de tamanho especificado, e inicializa ele com elementos provenientes de informações (Data) tiradas de um texto. Para isso, o texto será dividido nos espaços vazios, e cada parte será tratada como um número decimal.
            Por exemplo: V = Vector.Data(4,”47 11 8 15”) vai resultar em um conjunto (Array) numérico com os 4 valores, 47 11 8 15.
            </summary>
            <param name="size">Tamanho do vetor resultante</param>
            <param name="data">Informações, em forma de texto, para compor o conjunto. Quando faltam elementos no texto, o vetor é preenchido com 0 até alcançar o número de elementos especificados.</param>
            <returns>O vetor criado</returns>
        </member>
       <!-- <member name="M:SmallBasicEV3Extension.Vector.Add(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Add two vectors by adding the individual elements (C[0]=A[0]+B[0], C[1]=A[1]+B[1]...)
            </summary>
            <param name="size">That many numbers are taken for computation</param>
            <param name="A">First vector</param>
            <param name="B">Second vector</param>
            <returns>A vector of the given size what contains sum values</returns>
            </member>-->
        <member name="M:SmallBasicEV3Extension.Vector.Add(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Soma dois vetores (Vector), através da adição de seus elementos individuais (C[0]=A[0]+B[0], C[1]=A[1]+B[1]...)
            </summary>
            <param name="size">A quantidade de números que serão computados</param>
            <param name="A">Primeiro vetor</param>
            <param name="B">Segundo vetor</param>
            <returns>Um vetor, com tamanho igual a quantidade especificada, contendo o resultado das somas</returns>
        </member>
       <!--<member name="M:SmallBasicEV3Extension.Vector.Sort(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Sort the elements of a vector in increasing order.
            </summary>
            <param name="size">Number of elements to sort</param>
            <param name="A">The array containing the elements</param>
            <returns>A new vector with the elements in correct order</returns>
            </member>-->
        <member name="M:SmallBasicEV3Extension.Vector.Sort(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Ordena os elementos de um vetor (Vector) em ordem crescente.
            </summary>
            <param name="size">Número de elementos para ordenar</param>
            <param name="A">O conjunto (Array) contendo os elementos</param>
            <returns>O novo vetor com os elementos na ordem correta</returns>
        </member>
        <!--<member name="M:SmallBasicEV3Extension.Vector.Multiply(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Matrix multiplication operation.
            The input vectors are treated as two-dimensional matrices of given width and height. The individual rows of the matrix are stored inside the vectors directly one after the other.
            To learn more about this mathematical operation see http://en.wikipedia.org/wiki/Matrix_multiplication .
            </summary>
            <param name="rows">Number of rows in the resulting output matrix</param>
            <param name="columns">Number of columns in the resulting output matrix</param>
            <param name="k">Number of columns in input matrix A and number of rows in input matrix B</param>
            <param name="A">A matrix of size rows * k</param>
            <param name="B">A matrix of size k * columns</param>
            <returns>A matrix holding the multiplication result</returns>
        </member>-->
         <member name="M:SmallBasicEV3Extension.Vector.Multiply(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Operação de multiplicação de Matrizes (Matrix).
            Os vetores de entrada são considerados como matrizes bidimensionais de altura e largura pré-determinadas. As linhas individuais da matriz são armazenadas no vetor uma após a outra.
            Para aprender mais sobre essa operação matemática visite  https://pt.wikipedia.org/wiki/Produto_de_matrizes .
            </summary>
            <param name="rows">Número de linhas na matriz resultante de saída</param>
            <param name="columns">Número de colunas na matriz resultante de saída</param>
            <param name="k">Número de colunas na matriz de entrada A e número de linhas na matriz de entrada B</param>
            <param name="A">Uma matriz com tamanho linhas * k</param>
            <param name="B">Uma matriz com tamanho k * colunas</param>
            <returns>Uma matriz contendo o resultado da multiplicação</returns>
        </member>
    </members>
</doc>
